<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>win下pytorch-gpu版本安装</title>
      <link href="/2023/01/01/pytorch-gpu-install/"/>
      <url>/2023/01/01/pytorch-gpu-install/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>Pytorch</strong>的安装相对于<strong>tensorflow</strong>还是简单很多的。相对来说入门简单，封装少，简洁高效快速。</p><p>像tensorflow各种版本语法不同，与其他python库版本不兼容等问题pytorch会相对来说更少出现。</p><p>它是一个开源的Python机器学习库，基于Torch，用于自然语言处理等应用程序。</p><p>2017年1月，由Facebook人工智能研究院（FAIR）基于Torch推出了PyTorch。</p><p>它是一个基于Python的可续计算包，提供两个高级功能：</p><p>1、具有强大的GPU加速的张量计算（如NumPy）。</p><p>2、包含自动求导系统的深度神经网络。</p><p>PyTorch的前身是Torch，其底层和Torch框架一样，但是使用Python重新写了很多内容，不仅更加灵</p><p>活，支持动态图，而且提供了Python接口。它是由Torch7团队开发，是一个以Python优先的深度学</p><p>习框架，不仅能够实现强大的GPU加速，同时还支持动态神经网络，这是很多主流深度学习框架比如</p><p>Tensorflow等都不支持的。PyTorch 既可以看作加入了GPU支持的numpy，同时也可以看成一个拥有</p><p>自动求导功能的强大的深度神经网络 。</p><h3 id="一、首先，打开Anaconda-Prompt-创建一个环境"><a href="#一、首先，打开Anaconda-Prompt-创建一个环境" class="headerlink" title="一、首先，打开Anaconda Prompt 创建一个环境"></a>一、首先，打开Anaconda Prompt 创建一个环境</h3><p>如下图所示，以python&#x3D;3.7版本为例，conda名字为torch，输入命令：</p><p>conda creata -n torch python&#x3D;3.7</p><p><img src="https://s1.ax1x.com/2023/01/01/pSCy7lT.png"></p><h3 id="二、安装pytorch-GPU版本"><a href="#二、安装pytorch-GPU版本" class="headerlink" title="二、安装pytorch GPU版本"></a>二、安装pytorch GPU版本</h3><h4 id="（1）进入pytorch的官网"><a href="#（1）进入pytorch的官网" class="headerlink" title="（1）进入pytorch的官网"></a>（1）进入pytorch的官网</h4><p><a href="https://pytorch.org/">https://pytorch.org/</a></p><p>选择Stable、Windows、pip（一般来说pip会比conda安装的速度更快）、python、CUDA版本（不能高于你显卡驱动所支持的最高版本，显卡驱动所支持的最高版本查看方法见tensorflow-gpu安装的文章）</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6u1f.png"></p><h4 id="（2）执行安装命令"><a href="#（2）执行安装命令" class="headerlink" title="（2）执行安装命令"></a>（2）执行安装命令</h4><p>将生成的命令复制黏贴到你刚刚创建的conda环境中运行。</p><p>（如果速度<strong>慢</strong>就把后面的官方网址换成 <strong>-i 镜像源</strong>）</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6eht.png"></p><h4 id="（3）检查是否安装成功"><a href="#（3）检查是否安装成功" class="headerlink" title="（3）检查是否安装成功"></a>（3）检查是否安装成功</h4><p>在Anaconda Prompt中进入你刚刚创建的conda环境，依次输入命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><p>运行效果如下图所示：</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6lng.png"></p><p>表明成功安装pytorch的GPU版本，结束。</p><hr><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>win下tensorflow-gpu安装(tf2.5+CUDA11.2+cuDNN8.1.1)</title>
      <link href="/2022/12/31/tensorflow-install/"/>
      <url>/2022/12/31/tensorflow-install/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>windows，anaconda，pycharm, python3.7</strong></p><p>显卡3070ti laptop</p><h3 id="一、版本对应关系"><a href="#一、版本对应关系" class="headerlink" title="一、版本对应关系"></a>一、版本对应关系</h3><p>一定要先根据自己电脑的显卡、显卡驱动版本、python版本、tensorflow版本，去匹配对应的CUDA和cuDNN版本。各版本并非完全唯一对应，而是有一定的范围区间。官网上的对应关系图如下：按照这个来没错</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yPHA.png" alt="tf"></p><h3 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h3><h4 id="1-首先，查看自己电脑显卡所能支持的最高CUDA版本"><a href="#1-首先，查看自己电脑显卡所能支持的最高CUDA版本" class="headerlink" title="1.首先，查看自己电脑显卡所能支持的最高CUDA版本"></a>1.首先，查看自己电脑显卡所能支持的最高CUDA版本</h4><p>（1）cmd输入nividia-smi</p><p>如下图所示，涂黄色部分就表明电脑显卡所能支持的最高CUDA版本，你安装的CUDA版本不能高于此</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yZ38.png"></p><p>（2）右键桌面栏右下角的nvidia图标，点击NVIDIA控制面板</p><p>进入界面后点击左下角系统信息，再在系统信息页面点击组件一栏，如下图所示： 3D设置第三行NVCUDA64.DLL的产品名称中的CUDA版本就表明你电脑显卡所能支持的最高CUDA版本。</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9ytvF.png"></p><h4 id="2-安装对应版本CUDA和cudnn（以CUDA11-2-cuDNN8-1-1为例）"><a href="#2-安装对应版本CUDA和cudnn（以CUDA11-2-cuDNN8-1-1为例）" class="headerlink" title="2.安装对应版本CUDA和cudnn（以CUDA11.2+cuDNN8.1.1为例）"></a>2.安装对应版本CUDA和cudnn（以CUDA11.2+cuDNN8.1.1为例）</h4><p><strong>（1）CUDA</strong></p><p>下载地址：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>进入页面，选择你所需版本CUDA 一般来说xx.x.非0好一点</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yT8f.png"></p><p>依次选择 WINDOWS、x86_64、10、exe(local)</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yLrQ.png"></p><p>点击下载即可，文件大概2-3G。</p><p>点击刚才下载的CUDA安装包，管理员身份运行，点击”OK”</p><p>一路继续，然后选择”自定义安装”，当前版本比新版本高的就不要打勾！</p><p><img src="https://s1.ax1x.com/2022/12/31/pS96iMF.png"></p><p>点击”下一步” ，一路继续，选择安装位置默认的就行，有三个路径可以截图。</p><p>一路下一步，安装完成。</p><p><strong>验证是否安装成功：</strong></p><p>打开CMD输入： nvcc -V </p><p>下图为成功图片</p><p><img src="https://s1.ax1x.com/2022/12/31/pS968Zd.png"></p><p>安装成功后，环境变量里面系统自动添加CUDA_PATH和CUDA_PATH_V11_2路径，这样就可以运行了，更完美可以按下列步骤补全环境变量。</p><p>配置环境变量</p><p>1、确认系统变量中：CUDA_PATH和CUDA_PATH_V11.2已经存在</p><p>2、我们还需要在环境变量中添加如下几个变量：</p><p>CUDA_SDK_PATH &#x3D; C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.2</p><p>CUDA_SDK_BIN_PATH &#x3D; %CUDA_SDK_PATH%\bin\win64</p><p>CUDA_SDK_LIB_PATH &#x3D; %CUDA_SDK_PATH%\common\lib\x64</p><p><strong>（2）cudnn</strong></p><p>cudnn需要注册英伟达账户才能下载，但是也不费事，一个邮箱的问题。</p><p>从官网<a href="https://developer.nvidia.com/rdp/cudnn-archive%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84cudnn">https://developer.nvidia.com/rdp/cudnn-archive下载对应版本的cudnn</a></p><p><img src="https://s1.ax1x.com/2022/12/31/pS96yon.png"></p><p>找对应版本的cudnn 下载。</p><p>！！！</p><p>解压后，把里面cudnn中的的<strong>include，lib，bin</strong>文件夹里面的所有文件分别的、对应的、<strong>复制到</strong></p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2文件<strong>对应的include，lib，bin文件里面</strong>！这样才可以GPU加速！</p><p>！！！</p><p><img src="https://s1.ax1x.com/2022/12/31/pS96hyF.png"></p><p>至此，CUDA和cudnn 安装结束。</p><h4 id="3-安装对应版本tensorflow-gpu-2-5为例"><a href="#3-安装对应版本tensorflow-gpu-2-5为例" class="headerlink" title="3.安装对应版本tensorflow-gpu(2.5为例)"></a>3.安装对应版本tensorflow-gpu(2.5为例)</h4><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.5</span><br></pre></td></tr></table></figure><p>如果速度慢可以加上 -i 镜像源</p><p>安装完成后</p><p>输入pip list： 可以看到安装的tensorflow-gpu&#x3D;&#x3D;2.5.3</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9cPYt.png"></p><p>至此，安装结束，tensorflow-gpu环境搭建完成。</p><h3 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h3><p>如果你按照以上步骤下来还是不能正常运行，那么可能有两个原因：</p><h4 id="（1）CUDA版本过高"><a href="#（1）CUDA版本过高" class="headerlink" title="（1）CUDA版本过高"></a>（1）CUDA版本过高</h4><p>匹配兼容性问题，换一个低版本的CUDA，然后安装对应版本的cudnn和tensorflow-gpu</p><h4 id="（2）电脑没有C-环境"><a href="#（2）电脑没有C-环境" class="headerlink" title="（2）电脑没有C++环境"></a>（2）电脑没有C++环境</h4><p>一般现在的电脑出厂好像都有C++环境，如下图所示：</p><p><img src="https://s1.ax1x.com/2022/12/31/pSCpdUJ.png"></p><p>如果你的电脑没有C++环境的话，可以安装安装Visual Studio 2015 C++环境，或者VS2017，或者VS2019</p><p>（经验建议不要太高版本，因为Visual Studio的驱动和编译器可能与CUDA版本不匹配而出现问题）</p><p><strong>CUDA11.2 只支持2017，2019</strong></p><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pip配置国内源</title>
      <link href="/2022/12/31/Pip/"/>
      <url>/2022/12/31/Pip/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pip默认都是从国外的数据源下载，因此有时候会面临下载速度慢，甚至无法下载。因此，需要一个国内源来下载，速度会快很多，国内源有时候也会抽风，一个镜像源不行就换另一个源，不要在一棵树上吊死。按经验来说，国内一般pip install比conda install要快和稳定，即使conda换了镜像源。推荐使用一次性使用，不设置永久，万一那天某个镜像源抽风还要改配置文件。</p><h2 id="常用国内源"><a href="#常用国内源" class="headerlink" title="常用国内源"></a>常用国内源</h2><p><strong>清华大学</strong>  <code>https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p><strong>中国科技大学</strong> <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></p><p><strong>阿里云</strong> <code>http://mirrors.aliyun.com/pypi/simple/</code></p><p><strong>豆瓣</strong> <code>http://pypi.douban.com/simple/</code></p><h3 id="一次性使用"><a href="#一次性使用" class="headerlink" title="一次性使用"></a>一次性使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx -i http://pypi.douban.com/simple/ </span><br></pre></td></tr></table></figure><p>提示不信任则使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com </span><br></pre></td></tr></table></figure><p>再有问题就更新pip安装版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于CLIP（对比图文预训练方法）实现以文本精准搜图</title>
      <link href="/2022/12/30/txt2img/"/>
      <url>/2022/12/30/txt2img/</url>
      
        <content type="html"><![CDATA[<h2 id="基于CLIP（对比图文预训练方法）实现以文本精准搜图"><a href="#基于CLIP（对比图文预训练方法）实现以文本精准搜图" class="headerlink" title="基于CLIP（对比图文预训练方法）实现以文本精准搜图"></a>基于CLIP（对比图文预训练方法）实现以文本精准搜图</h2><p>在使用<a href="https://so.csdn.net/so/search?q=CLIP&spm=1001.2101.3001.7020">CLIP</a>做图文匹配时，发现只能用多个文本语句和一张图片匹配，而我想实现多个图片与文本进行匹配。</p><p><img src="https://img-blog.csdnimg.cn/f3e1f911b5e144aab584832e735d6b06.png" alt="CLIP"></p><p>然后我打个断点  用DEBUG看了下具体的模型运行过程</p><p>在经过预处理和模型后 logits_per_image以及logits_per_text的</p><p>tensor([[25.5625, 20.0938, 19.7500]], device&#x3D;’cuda:0’, dtype&#x3D;torch.float16)</p><p>我推测这三个float数值分别代表了这三个文本与一张图片的匹配程度，而最后的probs &#x3D; logits_per_image.softmax(dim&#x3D;-1).cpu().numpy()</p><p>也只是使用 softmax层进行一些权重、对数等变换处理下变成更规范的格式<br>再使用仅仅第一个语句与该图片匹配，tensor中数值仍为25.5625<br>所以验证猜想成立在经过model（image，text）时就已经确定图文匹配度的具体相关值。</p><p><img src="https://img-blog.csdnimg.cn/c1f219cf7820431ea4d5de02e9f6ebb0.png" alt="##"></p><p>将获得图文匹配度封装成函数，并返回匹配度的数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">str1,sent</span>):</span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    model, preprocess = clip.load(<span class="string">&quot;ViT-B/32&quot;</span>, device=device)</span><br><span class="line">    image = preprocess(Image.<span class="built_in">open</span>(str1)).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">    text = clip.tokenize([sent]).to(device)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        image_features = model.encode_image(image)</span><br><span class="line">        text_features = model.encode_text(text)</span><br><span class="line">        logits_per_image, logits_per_text = model(image, text)</span><br><span class="line">        similarity = <span class="built_in">str</span>(logits_per_image)[<span class="number">9</span>:<span class="number">13</span>]</span><br><span class="line">        res = <span class="built_in">int</span>(similarity)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>利用for循环，使用字典构建键值对存放多张图片的绝对路径和图文匹配度，并进行图文匹配度排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;...............................................&#x27;</span></span><br><span class="line">sent = <span class="built_in">input</span>(<span class="string">&quot;请输入图片关键词：&quot;</span>)</span><br><span class="line">   getPic(sent)</span><br><span class="line">   <span class="comment">#获取图片</span></span><br><span class="line">   path0 =<span class="string">&#x27;C:\\Users\\DELL\\Desktop\\CLIP-main\\&#x27;</span>+ sent</span><br><span class="line">   similar_key = []</span><br><span class="line">   similar_value = []</span><br><span class="line">   <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path0):</span><br><span class="line">       <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;jpg&#x27;</span>) <span class="keyword">or</span> filename.endswith(<span class="string">&#x27;png&#x27;</span>):</span><br><span class="line">           <span class="comment">#存储图片的文件夹绝对路径</span></span><br><span class="line">           str1 = path0 +<span class="string">&#x27;\\&#x27;</span>+filename</span><br><span class="line">           similar_key.append(str1)</span><br><span class="line">           sim = <span class="keyword">match</span>(str1,sent)</span><br><span class="line">           <span class="comment">#将得到的多张图片匹配你输入的图片关键词</span></span><br><span class="line">           similar_value.append(sim)</span><br><span class="line">   <span class="comment"># 存放图片绝对路径和图文相似度的字典</span></span><br><span class="line">   similar_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(similar_key, similar_value))</span><br><span class="line">   <span class="built_in">print</span>(similar_dict)</span><br><span class="line">   similar_value.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">   <span class="built_in">print</span>(similar_value)</span><br><span class="line">   result = <span class="string">&#x27; &#x27;</span></span><br><span class="line">   <span class="comment"># 找到图文相似度最高的那个图片的绝对路径</span></span><br><span class="line">   <span class="keyword">for</span> key, value <span class="keyword">in</span> similar_dict.items():</span><br><span class="line">       <span class="keyword">if</span> value == similar_value[<span class="number">0</span>]:</span><br><span class="line">           result = key</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">   img = Image.<span class="built_in">open</span>(result)</span><br><span class="line">   img.show()</span><br></pre></td></tr></table></figure><p>执行完程序显示出最匹配你需求的那张图片。</p><p>还可以用pyqt做一个界面，这样更好用，我打包了一下软件代码。</p><p><a href="https://download.csdn.net/download/Constantiny/86511028?spm=1001.2014.3001.5503 "> 代码下载 </a></p><p>前置的爬虫抓取图片并存储路径的步骤不做介绍。</p><p><img src="https://img-blog.csdnimg.cn/f39ff56c396c4fd6bcf90e81b523c289.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/936149af80e34dcf86911f08a316be18.png" alt="在这里插入图片描述"></p><p>作者也是小白，如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
