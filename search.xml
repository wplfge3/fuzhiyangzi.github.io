<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>离线中英文文字图像匹配度检测软件（基于CLIP、Transformers等实现）</title>
      <link href="/2023/01/02/text4image/"/>
      <url>/2023/01/02/text4image/</url>
      
        <content type="html"><![CDATA[<h2 id="文字图像匹配度检测软件（基于CLIP、Transformers等实现）"><a href="#文字图像匹配度检测软件（基于CLIP、Transformers等实现）" class="headerlink" title="文字图像匹配度检测软件（基于CLIP、Transformers等实现）"></a>文字图像匹配度检测软件（基于CLIP、Transformers等实现）</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>使用<strong>CLIP</strong>（对比图文预训练方法）提供的图文匹配度检测接口，使用<strong>huggingface</strong>基于<strong>Transformers</strong>的机器模型实现离线翻译，因此输入中英文均可检测。前端图形化界面使用<strong>PYQT</strong>开发,并使用了<strong>qdarkstyle</strong>进行优化，具体效果如下图所示：</li></ul><p><img src="https://img-blog.csdnimg.cn/f8fed141313948989761d7345cc9c8e7.png" alt="在这里插入图片描述"></p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><ul><li><p>左边一栏是候选文字语句，右边一栏是对应每条文字语句的匹配度（支持中英文）</p></li><li><p>点击选择图片，如为我代码中附带的数据集中的图片，那么右边第一列的第一行会附上这张图片的正确描述，如为其他图片，则可以手动输入正确描述，随机抽取中文、英文按钮会下后四行抽取干扰的中文、英文描述，<strong>所有候选的5个描述语句均可手动修改</strong>。</p></li><li><p>下面是一个例子：</p></li></ul><p><img src="https://img-blog.csdnimg.cn/1ea588349bb54ef3bbca12c6e0450f1b.png" alt="在这里插入图片描述"></p><p>从结果可以看出，模型对于最贴合图片的那句描述是可以正确识别的，而且效果很好，支持中英文，我自己也做了很多实验测试，代码中也有评估模型准确度的代码testCode.py</p><h3 id="部分代码："><a href="#部分代码：" class="headerlink" title="部分代码："></a>部分代码：</h3><p>主体代码如下，其余代码以及requirements.txt等打包放在<a href="https://download.csdn.net/download/Constantiny/87357710?spm=1001.2014.3001.5503">我的资源</a>中，可以下载并配置好相关环境后运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;txtimgui.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.15.4</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QFileDialog</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> translate_main</span><br><span class="line"><span class="keyword">import</span> clip</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line"><span class="keyword">global</span> imgNamePath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPicName</span>(<span class="params">myLine</span>):</span><br><span class="line">    resName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;#enc#0 &quot;</span> <span class="keyword">in</span> myLine:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#enc#0 &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;#zhc#1 &quot;</span> <span class="keyword">in</span> myLine:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#zhc#1 &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#zhc#0 &quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> resName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPicSentence</span>(<span class="params">myLine</span>):</span><br><span class="line">    resName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;#enc#0 &quot;</span> <span class="keyword">in</span> myLine:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#enc#0 &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&quot;#zhc#1 &quot;</span> <span class="keyword">in</span> myLine:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#zhc#1 &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resName = myLine.split(<span class="string">&quot;#zhc#0 &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> resName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_MainWindow</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setupUi</span>(<span class="params">self, MainWindow</span>):</span><br><span class="line">        MainWindow.setObjectName(<span class="string">&quot;MainWindow&quot;</span>)</span><br><span class="line">        MainWindow.resize(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">        MainWindow.setMinimumSize(QtCore.QSize(<span class="number">80</span>, <span class="number">30</span>))</span><br><span class="line">        self.centralwidget = QtWidgets.QWidget(MainWindow)</span><br><span class="line">        self.centralwidget.setObjectName(<span class="string">&quot;centralwidget&quot;</span>)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton.setGeometry(QtCore.QRect(<span class="number">30</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">31</span>))</span><br><span class="line">        self.pushButton.setObjectName(<span class="string">&quot;pushButton&quot;</span>)</span><br><span class="line">        self.pushButton.clicked.connect(self.openImage)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.centralwidget)</span><br><span class="line">        self.label.setGeometry(QtCore.QRect(<span class="number">40</span>, <span class="number">160</span>, <span class="number">241</span>, <span class="number">271</span>))</span><br><span class="line">        self.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)</span><br><span class="line">        self.lineEdit.setGeometry(QtCore.QRect(<span class="number">120</span>, <span class="number">90</span>, <span class="number">181</span>, <span class="number">31</span>))</span><br><span class="line">        self.lineEdit.setObjectName(<span class="string">&quot;lineEdit&quot;</span>)</span><br><span class="line">        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton_2.setGeometry(QtCore.QRect(<span class="number">374</span>, <span class="number">362</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        self.pushButton_2.setObjectName(<span class="string">&quot;pushButton_2&quot;</span>)</span><br><span class="line">        self.pushButton_2.clicked.connect(self.randomExtract)</span><br><span class="line">        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton_3.setGeometry(QtCore.QRect(<span class="number">514</span>, <span class="number">362</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        self.pushButton_3.setObjectName(<span class="string">&quot;pushButton_3&quot;</span>)</span><br><span class="line">        self.pushButton_3.clicked.connect(self.matching)</span><br><span class="line">        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)</span><br><span class="line">        self.pushButton_5.setGeometry(QtCore.QRect(<span class="number">374</span>, <span class="number">462</span>, <span class="number">81</span>, <span class="number">31</span>))</span><br><span class="line">        self.pushButton_5.setObjectName(<span class="string">&quot;pushButton_5&quot;</span>)</span><br><span class="line">        self.pushButton_5.clicked.connect(self.randomExtractEn)</span><br><span class="line">        self.widget = QtWidgets.QWidget(self.centralwidget)</span><br><span class="line">        self.widget.setGeometry(QtCore.QRect(<span class="number">310</span>, <span class="number">100</span>, <span class="number">331</span>, <span class="number">221</span>))</span><br><span class="line">        self.widget.setObjectName(<span class="string">&quot;widget&quot;</span>)</span><br><span class="line">        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)</span><br><span class="line">        self.verticalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.verticalLayout.setObjectName(<span class="string">&quot;verticalLayout&quot;</span>)</span><br><span class="line">        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_2.setMinimumSize(QtCore.QSize(<span class="number">100</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_2.setObjectName(<span class="string">&quot;lineEdit_2&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_2)</span><br><span class="line">        self.lineEdit_3 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_3.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_3.setObjectName(<span class="string">&quot;lineEdit_3&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_3)</span><br><span class="line">        self.lineEdit_4 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_4.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_4.setObjectName(<span class="string">&quot;lineEdit_4&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_4)</span><br><span class="line">        self.lineEdit_5 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_5.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_5.setObjectName(<span class="string">&quot;lineEdit_5&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_5)</span><br><span class="line">        self.lineEdit_6 = QtWidgets.QLineEdit(self.widget)</span><br><span class="line">        self.lineEdit_6.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_6.setObjectName(<span class="string">&quot;lineEdit_6&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.lineEdit_6)</span><br><span class="line">        self.widget1 = QtWidgets.QWidget(self.centralwidget)</span><br><span class="line">        self.widget1.setGeometry(QtCore.QRect(<span class="number">650</span>, <span class="number">100</span>, <span class="number">135</span>, <span class="number">221</span>))</span><br><span class="line">        self.widget1.setObjectName(<span class="string">&quot;widget1&quot;</span>)</span><br><span class="line">        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget1)</span><br><span class="line">        self.verticalLayout_2.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.verticalLayout_2.setObjectName(<span class="string">&quot;verticalLayout_2&quot;</span>)</span><br><span class="line">        self.lineEdit_7 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_7.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_7.setObjectName(<span class="string">&quot;lineEdit_7&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_7)</span><br><span class="line">        self.lineEdit_8 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_8.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_8.setObjectName(<span class="string">&quot;lineEdit_8&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_8)</span><br><span class="line">        self.lineEdit_9 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_9.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_9.setObjectName(<span class="string">&quot;lineEdit_9&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_9)</span><br><span class="line">        self.lineEdit_10 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_10.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_10.setObjectName(<span class="string">&quot;lineEdit_10&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_10)</span><br><span class="line">        self.lineEdit_11 = QtWidgets.QLineEdit(self.widget1)</span><br><span class="line">        self.lineEdit_11.setMinimumSize(QtCore.QSize(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">        self.lineEdit_11.setObjectName(<span class="string">&quot;lineEdit_11&quot;</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.lineEdit_11)</span><br><span class="line">        MainWindow.setCentralWidget(self.centralwidget)</span><br><span class="line">        self.statusbar = QtWidgets.QStatusBar(MainWindow)</span><br><span class="line">        self.statusbar.setObjectName(<span class="string">&quot;statusbar&quot;</span>)</span><br><span class="line">        MainWindow.setStatusBar(self.statusbar)</span><br><span class="line">        self.retranslateUi(MainWindow)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(MainWindow)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> imgNamePath</span><br><span class="line">        <span class="comment"># 这里为了方便别的地方引用图片路径，将其设置为全局变量</span></span><br><span class="line">        <span class="comment"># 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型</span></span><br><span class="line">        <span class="comment"># QFileDialog就是系统对话框的那个类第一个参数是上下文，第二个参数是弹框的名字，第三个参数是默认打开的路径，第四个参数是需要的格式</span></span><br><span class="line">        <span class="comment"># 设置try-except防止各种不符合要求的操作导致软件退出</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            imgNamePath, imgType = QFileDialog.getOpenFileName(self.centralwidget, <span class="string">&quot;选择图片&quot;</span>,</span><br><span class="line">                                                               <span class="string">&#x27;./dataset&#x27;</span>,</span><br><span class="line">                                                               <span class="string">&quot;*.jpg;;*.png;;All Files(*)&quot;</span>)</span><br><span class="line">            <span class="comment"># 通过文件路径获取图片文件，并设置图片长宽为label控件的长、宽</span></span><br><span class="line">            img = QtGui.QPixmap(imgNamePath).scaled(self.label.width(), self.label.height())</span><br><span class="line">            <span class="comment"># 在label控件上显示选择的图片</span></span><br><span class="line">            self.label.setPixmap(img)</span><br><span class="line">        <span class="comment"># 显示所选图片的路径</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># print(imgNamePath)</span></span><br><span class="line">        self.lineEdit.setText(imgNamePath)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resPath = imgNamePath.split(<span class="string">&#x27;image/&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 卫星</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;./dataset/militray_label.txt&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> getPicName(line) == resPath:</span><br><span class="line">                <span class="built_in">print</span>(line)</span><br><span class="line">                self.lineEdit_2.setText(getPicSentence(line))</span><br><span class="line">        <span class="comment"># 中文</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;./dataset/ch_label.txt&quot;</span>, encoding=<span class="string">&#x27;GBK&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> getPicName(line) == resPath:</span><br><span class="line">                <span class="built_in">print</span>(line)</span><br><span class="line">                self.lineEdit_2.setText(getPicSentence(line))</span><br><span class="line">        <span class="comment"># 英文</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;./dataset/enc_label.txt&quot;</span>, encoding=<span class="string">&#x27;GBK&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> getPicName(line) == resPath:</span><br><span class="line">                <span class="built_in">print</span>(line)</span><br><span class="line">                self.lineEdit_2.setText(getPicSentence(line))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomExtract</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 随机抽取 图片名字和对应正确描述构成映射 读图片的时候把正确的那句话也放到第一个框里</span></span><br><span class="line">        r1 = random.randint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">        r2 = random.randint(<span class="number">21</span>, <span class="number">30</span>)</span><br><span class="line">        r3 = random.randint(<span class="number">31</span>, <span class="number">39</span>)</span><br><span class="line">        r4 = random.randint(<span class="number">40</span>, <span class="number">49</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;./dataset/militray_label.txt&quot;</span>, encoding=<span class="string">&#x27;utf=8&#x27;</span>)</span><br><span class="line">        resList = []</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            lines = f.readlines(<span class="number">10000</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lines:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                resList.append(getPicSentence(line))</span><br><span class="line">        <span class="built_in">print</span>(resList[r1], resList[r2], resList[r3], resList[r4])</span><br><span class="line">        self.lineEdit_3.setText(resList[r1])</span><br><span class="line">        self.lineEdit_4.setText(resList[r2])</span><br><span class="line">        self.lineEdit_5.setText(resList[r3])</span><br><span class="line">        self.lineEdit_6.setText(resList[r4])</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randomExtractEn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 随机抽取英文 图片名字和对应正确描述构成映射  读图片的时候把正确的那句话也放到第一个框里</span></span><br><span class="line">        r1 = random.randint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">        r2 = random.randint(<span class="number">21</span>, <span class="number">30</span>)</span><br><span class="line">        r3 = random.randint(<span class="number">31</span>, <span class="number">39</span>)</span><br><span class="line">        r4 = random.randint(<span class="number">40</span>, <span class="number">49</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&quot;./dataset/militray_enc_label.txt&quot;</span>, encoding=<span class="string">&#x27;utf=8&#x27;</span>)</span><br><span class="line">        resList = []</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            lines = f.readlines(<span class="number">10000</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lines:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                resList.append(getPicSentence(line))</span><br><span class="line">        <span class="built_in">print</span>(resList[r1], resList[r2], resList[r3], resList[r4])</span><br><span class="line">        self.lineEdit_3.setText(resList[r1])</span><br><span class="line">        self.lineEdit_4.setText(resList[r2])</span><br><span class="line">        self.lineEdit_5.setText(resList[r3])</span><br><span class="line">        self.lineEdit_6.setText(resList[r4])</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">matching</span>(<span class="params">self</span>):</span><br><span class="line">        t1 = self.lineEdit_2.text()</span><br><span class="line">        t2 = self.lineEdit_3.text()</span><br><span class="line">        t3 = self.lineEdit_4.text()</span><br><span class="line">        t4 = self.lineEdit_5.text()</span><br><span class="line">        t5 = self.lineEdit_6.text()</span><br><span class="line">        s1, s2, s3, s4, s5 = translate_main.trans(t1, t2, t3, t4, t5)</span><br><span class="line">        device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">        model, preprocess = clip.load(<span class="string">&quot;ViT-B/32&quot;</span>, device=device)</span><br><span class="line">        <span class="keyword">global</span> imgNamePath</span><br><span class="line">        image = preprocess(Image.<span class="built_in">open</span>(imgNamePath)).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">        text = clip.tokenize([<span class="built_in">str</span>(s1), <span class="built_in">str</span>(s2), <span class="built_in">str</span>(s3), <span class="built_in">str</span>(s4), <span class="built_in">str</span>(s5)]).to(device)</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            image_features = model.encode_image(image)</span><br><span class="line">            text_features = model.encode_text(text)</span><br><span class="line">            logits_per_image, logits_per_text = model(image, text)</span><br><span class="line">            probs = logits_per_image.softmax(dim=-<span class="number">1</span>).cpu().numpy()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;文本图像匹配度：&quot;</span>, probs)  <span class="comment"># prints: [[0.9927937  0.00421068 0.00299572]]</span></span><br><span class="line">            prob = <span class="built_in">str</span>(probs)[<span class="number">2</span>:-<span class="number">2</span>]</span><br><span class="line">            <span class="built_in">print</span>(prob)</span><br><span class="line">            t1, t2, t3, t4, t5 = prob.split()</span><br><span class="line">            <span class="comment"># 格式化输出 更好看</span></span><br><span class="line">            <span class="comment"># 使用python内置的round（）函数</span></span><br><span class="line">            <span class="comment"># a = 1.1314 a = 1.0000 a = 1.1267</span></span><br><span class="line">            <span class="comment"># b = round（a.2）b = round（a.2）b = round（a.2）</span></span><br><span class="line">            <span class="comment"># output b = 1.13 output b = 1.0 output b = 1.13</span></span><br><span class="line">            t1 = <span class="built_in">round</span>(<span class="built_in">float</span>(t1), <span class="number">4</span>)</span><br><span class="line">            t2 = <span class="built_in">round</span>(<span class="built_in">float</span>(t2), <span class="number">4</span>)</span><br><span class="line">            t3 = <span class="built_in">round</span>(<span class="built_in">float</span>(t3), <span class="number">4</span>)</span><br><span class="line">            t4 = <span class="built_in">round</span>(<span class="built_in">float</span>(t4), <span class="number">4</span>)</span><br><span class="line">            t5 = <span class="built_in">round</span>(<span class="built_in">float</span>(t5), <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">print</span>(t1, t2, t3, t4, t5)</span><br><span class="line">            self.lineEdit_7.setText(<span class="built_in">str</span>(t1))</span><br><span class="line">            self.lineEdit_8.setText(<span class="built_in">str</span>(t2))</span><br><span class="line">            self.lineEdit_9.setText(<span class="built_in">str</span>(t3))</span><br><span class="line">            self.lineEdit_10.setText(<span class="built_in">str</span>(t4))</span><br><span class="line">            self.lineEdit_11.setText(<span class="built_in">str</span>(t5))</span><br><span class="line">            <span class="comment"># 下面为记录每次运行的结果</span></span><br><span class="line">            <span class="comment"># 英文测试</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./testResult/enTestResult.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> writers:</span><br><span class="line">                <span class="comment"># 中文测试</span></span><br><span class="line">                <span class="comment"># with open(&#x27;./testResult/testResult.txt&#x27;, &#x27;a+&#x27;) as writers:</span></span><br><span class="line">                <span class="comment"># 打开文件 ‘a+’ ==a+r（可追加可写，文件若不存在就创建）</span></span><br><span class="line">                <span class="keyword">if</span> t1 &gt; <span class="number">0.5</span>:</span><br><span class="line">                    a = imgNamePath</span><br><span class="line">                    b = t1</span><br><span class="line">                    c = <span class="string">&#x27;True&#x27;</span></span><br><span class="line">                    <span class="comment"># 如果要按行写入，我们只需要再字符串开头或结尾添加换行符&#x27;\n&#x27;</span></span><br><span class="line">                    <span class="comment"># writers.write(a + &#x27;\n&#x27;)</span></span><br><span class="line">                    <span class="comment"># 如果想要将多个变量同时写入一行中，可以使用writelines()函数,</span></span><br><span class="line">                    <span class="comment"># 要求将传入的变量写成一个list：</span></span><br><span class="line">                    <span class="comment"># writers.write(&#x27;\n&#x27;)</span></span><br><span class="line">                    <span class="comment"># writers.writelines([str(a), &#x27;,&#x27;, str(b), &#x27;,&#x27;, str(c)])</span></span><br><span class="line">                    writers.write(<span class="built_in">str</span>(a) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(b) + <span class="string">&#x27;,&#x27;</span> + <span class="built_in">str</span>(c) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res = <span class="string">&#x27;False&#x27;</span></span><br><span class="line">                    writers.write(res + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment"># return t1, t2, t3, t4, t5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retranslateUi</span>(<span class="params">self, MainWindow</span>):</span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        MainWindow.setWindowTitle(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;文字图像匹配度检测&quot;</span>))</span><br><span class="line">        self.pushButton.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;选择图片&quot;</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>,</span><br><span class="line">                                      <span class="string">&quot;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=\&quot; font-size:14pt; font-weight:600;\&quot;&gt;图文匹配&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>))</span><br><span class="line">        self.pushButton_2.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;随机抽取中文&quot;</span>))</span><br><span class="line">        self.pushButton_3.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;开始检测&quot;</span>))</span><br><span class="line">        self.pushButton_5.setText(_translate(<span class="string">&quot;MainWindow&quot;</span>, <span class="string">&quot;随机抽取英文&quot;</span>))</span><br></pre></td></tr></table></figure><p><strong>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 多模态项目 </category>
          
          <category> 图文匹配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> CLIP </tag>
            
            <tag> Transformers </tag>
            
            <tag> Python </tag>
            
            <tag> Pyqt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win下pytorch-gpu版本安装</title>
      <link href="/2023/01/01/pytorch-gpu-install/"/>
      <url>/2023/01/01/pytorch-gpu-install/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>Pytorch</strong>的安装相对于<strong>tensorflow</strong>还是简单很多的。相对来说入门简单，封装少，简洁高效快速。</p><p>像tensorflow各种版本语法不同，与其他python库版本不兼容等问题pytorch会相对来说更少出现。</p><p>它是一个开源的Python机器学习库，基于Torch，用于自然语言处理等应用程序。</p><p>2017年1月，由Facebook人工智能研究院（FAIR）基于Torch推出了PyTorch。</p><p>它是一个基于Python的可续计算包，提供两个高级功能：</p><p>1、具有强大的GPU加速的张量计算（如NumPy）。</p><p>2、包含自动求导系统的深度神经网络。</p><p>PyTorch的前身是Torch，其底层和Torch框架一样，但是使用Python重新写了很多内容，不仅更加灵</p><p>活，支持动态图，而且提供了Python接口。它是由Torch7团队开发，是一个以Python优先的深度学</p><p>习框架，不仅能够实现强大的GPU加速，同时还支持动态神经网络，这是很多主流深度学习框架比如</p><p>Tensorflow等都不支持的。PyTorch 既可以看作加入了GPU支持的numpy，同时也可以看成一个拥有</p><p>自动求导功能的强大的深度神经网络 。</p><h3 id="一、首先，打开Anaconda-Prompt-创建一个环境"><a href="#一、首先，打开Anaconda-Prompt-创建一个环境" class="headerlink" title="一、首先，打开Anaconda Prompt 创建一个环境"></a>一、首先，打开Anaconda Prompt 创建一个环境</h3><p>如下图所示，以python&#x3D;3.7版本为例，conda名字为torch，输入命令：</p><p>conda creata -n torch python&#x3D;3.7</p><p><img src="https://s1.ax1x.com/2023/01/01/pSCy7lT.png"></p><h3 id="二、安装pytorch-GPU版本"><a href="#二、安装pytorch-GPU版本" class="headerlink" title="二、安装pytorch GPU版本"></a>二、安装pytorch GPU版本</h3><h4 id="（1）进入pytorch的官网"><a href="#（1）进入pytorch的官网" class="headerlink" title="（1）进入pytorch的官网"></a>（1）进入pytorch的官网</h4><p><a href="https://pytorch.org/">https://pytorch.org/</a></p><p>选择Stable、Windows、pip（一般来说pip会比conda安装的速度更快）、python、CUDA版本（不能高于你显卡驱动所支持的最高版本，显卡驱动所支持的最高版本查看方法见tensorflow-gpu安装的文章）</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6u1f.png"></p><h4 id="（2）执行安装命令"><a href="#（2）执行安装命令" class="headerlink" title="（2）执行安装命令"></a>（2）执行安装命令</h4><p>将生成的命令复制黏贴到你刚刚创建的conda环境中运行。</p><p>（如果速度<strong>慢</strong>就把后面的官方网址换成 <strong>-i 镜像源</strong>）</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6eht.png"></p><h4 id="（3）检查是否安装成功"><a href="#（3）检查是否安装成功" class="headerlink" title="（3）检查是否安装成功"></a>（3）检查是否安装成功</h4><p>在Anaconda Prompt中进入你刚刚创建的conda环境，依次输入命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure><p>运行效果如下图所示：</p><p><img src="https://s1.ax1x.com/2023/01/01/pSC6lng.png"></p><p>表明成功安装pytorch的GPU版本，结束。</p><hr><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境配置 </category>
          
          <category> pytorch-gpu-install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> GPU </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win下tensorflow-gpu安装(tf2.5+CUDA11.2+cuDNN8.1.1)</title>
      <link href="/2022/12/31/tensorflow-install/"/>
      <url>/2022/12/31/tensorflow-install/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>windows，anaconda，pycharm, python3.7</strong></p><p>显卡3070ti laptop</p><h3 id="一、版本对应关系"><a href="#一、版本对应关系" class="headerlink" title="一、版本对应关系"></a>一、版本对应关系</h3><p>一定要先根据自己电脑的显卡、显卡驱动版本、python版本、tensorflow版本，去匹配对应的CUDA和cuDNN版本。各版本并非完全唯一对应，而是有一定的范围区间。官网上的对应关系图如下：按照这个来没错</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yPHA.png" alt="tf"></p><h3 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h3><h4 id="1-首先，查看自己电脑显卡所能支持的最高CUDA版本"><a href="#1-首先，查看自己电脑显卡所能支持的最高CUDA版本" class="headerlink" title="1.首先，查看自己电脑显卡所能支持的最高CUDA版本"></a>1.首先，查看自己电脑显卡所能支持的最高CUDA版本</h4><p>（1）cmd输入nividia-smi</p><p>如下图所示，涂黄色部分就表明电脑显卡所能支持的最高CUDA版本，你安装的CUDA版本不能高于此</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yZ38.png"></p><p>（2）右键桌面栏右下角的nvidia图标，点击NVIDIA控制面板</p><p>进入界面后点击左下角系统信息，再在系统信息页面点击组件一栏，如下图所示： 3D设置第三行NVCUDA64.DLL的产品名称中的CUDA版本就表明你电脑显卡所能支持的最高CUDA版本。</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9ytvF.png"></p><h4 id="2-安装对应版本CUDA和cudnn（以CUDA11-2-cuDNN8-1-1为例）"><a href="#2-安装对应版本CUDA和cudnn（以CUDA11-2-cuDNN8-1-1为例）" class="headerlink" title="2.安装对应版本CUDA和cudnn（以CUDA11.2+cuDNN8.1.1为例）"></a>2.安装对应版本CUDA和cudnn（以CUDA11.2+cuDNN8.1.1为例）</h4><p><strong>（1）CUDA</strong></p><p>下载地址：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>进入页面，选择你所需版本CUDA 一般来说xx.x.非0好一点</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yT8f.png"></p><p>依次选择 WINDOWS、x86_64、10、exe(local)</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9yLrQ.png"></p><p>点击下载即可，文件大概2-3G。</p><p>点击刚才下载的CUDA安装包，管理员身份运行，点击”OK”</p><p>一路继续，然后选择”自定义安装”，当前版本比新版本高的就不要打勾！</p><p><img src="https://s1.ax1x.com/2022/12/31/pS96iMF.png"></p><p>点击”下一步” ，一路继续，选择安装位置默认的就行，有三个路径可以截图。</p><p>一路下一步，安装完成。</p><p><strong>验证是否安装成功：</strong></p><p>打开CMD输入： nvcc -V </p><p>下图为成功图片</p><p><img src="https://s1.ax1x.com/2022/12/31/pS968Zd.png"></p><p>安装成功后，环境变量里面系统自动添加CUDA_PATH和CUDA_PATH_V11_2路径，这样就可以运行了，更完美可以按下列步骤补全环境变量。</p><p>配置环境变量</p><p>1、确认系统变量中：CUDA_PATH和CUDA_PATH_V11.2已经存在</p><p>2、我们还需要在环境变量中添加如下几个变量：</p><p>CUDA_SDK_PATH &#x3D; C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.2</p><p>CUDA_SDK_BIN_PATH &#x3D; %CUDA_SDK_PATH%\bin\win64</p><p>CUDA_SDK_LIB_PATH &#x3D; %CUDA_SDK_PATH%\common\lib\x64</p><p><strong>（2）cudnn</strong></p><p>cudnn需要注册英伟达账户才能下载，但是也不费事，一个邮箱的问题。</p><p>从官网<a href="https://developer.nvidia.com/rdp/cudnn-archive%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC%E7%9A%84cudnn">https://developer.nvidia.com/rdp/cudnn-archive下载对应版本的cudnn</a></p><p><img src="https://s1.ax1x.com/2022/12/31/pS96yon.png"></p><p>找对应版本的cudnn 下载。</p><p>！！！</p><p>解压后，把里面cudnn中的的<strong>include，lib，bin</strong>文件夹里面的所有文件分别的、对应的、<strong>复制到</strong></p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.2文件<strong>对应的include，lib，bin文件里面</strong>！这样才可以GPU加速！</p><p>！！！</p><p><img src="https://s1.ax1x.com/2022/12/31/pS96hyF.png"></p><p>至此，CUDA和cudnn 安装结束。</p><h4 id="3-安装对应版本tensorflow-gpu-2-5为例"><a href="#3-安装对应版本tensorflow-gpu-2-5为例" class="headerlink" title="3.安装对应版本tensorflow-gpu(2.5为例)"></a>3.安装对应版本tensorflow-gpu(2.5为例)</h4><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==2.5</span><br></pre></td></tr></table></figure><p>如果速度慢可以加上 -i 镜像源</p><p>安装完成后</p><p>输入pip list： 可以看到安装的tensorflow-gpu&#x3D;&#x3D;2.5.3</p><p><img src="https://s1.ax1x.com/2022/12/31/pS9cPYt.png"></p><p>至此，安装结束，tensorflow-gpu环境搭建完成。</p><h3 id="三、注意事项"><a href="#三、注意事项" class="headerlink" title="三、注意事项"></a>三、注意事项</h3><p>如果你按照以上步骤下来还是不能正常运行，那么可能有两个原因：</p><h4 id="（1）CUDA版本过高"><a href="#（1）CUDA版本过高" class="headerlink" title="（1）CUDA版本过高"></a>（1）CUDA版本过高</h4><p>匹配兼容性问题，换一个低版本的CUDA，然后安装对应版本的cudnn和tensorflow-gpu</p><h4 id="（2）电脑没有C-环境"><a href="#（2）电脑没有C-环境" class="headerlink" title="（2）电脑没有C++环境"></a>（2）电脑没有C++环境</h4><p>一般现在的电脑出厂好像都有C++环境，如下图所示：</p><p><img src="https://s1.ax1x.com/2022/12/31/pSCpdUJ.png"></p><p>如果你的电脑没有C++环境的话，可以安装安装Visual Studio 2015 C++环境，或者VS2017，或者VS2019</p><p>（经验建议不要太高版本，因为Visual Studio的驱动和编译器可能与CUDA版本不匹配而出现问题）</p><p><strong>CUDA11.2 只支持2017，2019</strong></p><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境配置 </category>
          
          <category> tensorflow-gpu-install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> GPU </tag>
            
            <tag> CUDA </tag>
            
            <tag> cudnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip配置国内源</title>
      <link href="/2022/12/31/Pip/"/>
      <url>/2022/12/31/Pip/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>pip默认都是从国外的数据源下载，因此有时候会面临下载速度慢，甚至无法下载。因此，需要一个国内源来下载，速度会快很多，国内源有时候也会抽风，一个镜像源不行就换另一个源，不要在一棵树上吊死。按经验来说，国内一般pip install比conda install要快和稳定，即使conda换了镜像源。推荐使用一次性使用，不设置永久，万一那天某个镜像源抽风还要改配置文件。</p><h2 id="常用国内源"><a href="#常用国内源" class="headerlink" title="常用国内源"></a>常用国内源</h2><p><strong>清华大学</strong>  <code>https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p><strong>中国科技大学</strong> <code>https://pypi.mirrors.ustc.edu.cn/simple/</code></p><p><strong>阿里云</strong> <code>http://mirrors.aliyun.com/pypi/simple/</code></p><p><strong>豆瓣</strong> <code>http://pypi.douban.com/simple/</code></p><h3 id="一次性使用"><a href="#一次性使用" class="headerlink" title="一次性使用"></a>一次性使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx -i http://pypi.douban.com/simple/ </span><br></pre></td></tr></table></figure><p>提示不信任则使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com </span><br></pre></td></tr></table></figure><p>再有问题就更新pip安装版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习环境配置 </category>
          
          <category> pip镜像源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
            <tag> 镜像源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CLIP（对比图文预训练方法）实现以文本精准搜图</title>
      <link href="/2022/12/30/txt2img/"/>
      <url>/2022/12/30/txt2img/</url>
      
        <content type="html"><![CDATA[<h2 id="基于CLIP（对比图文预训练方法）实现以文本精准搜图"><a href="#基于CLIP（对比图文预训练方法）实现以文本精准搜图" class="headerlink" title="基于CLIP（对比图文预训练方法）实现以文本精准搜图"></a>基于CLIP（对比图文预训练方法）实现以文本精准搜图</h2><p>在使用<a href="https://so.csdn.net/so/search?q=CLIP&spm=1001.2101.3001.7020">CLIP</a>做图文匹配时，发现只能用多个文本语句和一张图片匹配，而我想实现多个图片与文本进行匹配。</p><p><img src="https://img-blog.csdnimg.cn/f3e1f911b5e144aab584832e735d6b06.png" alt="CLIP"></p><p>然后我打个断点  用DEBUG看了下具体的模型运行过程</p><p>在经过预处理和模型后 logits_per_image以及logits_per_text的</p><p>tensor([[25.5625, 20.0938, 19.7500]], device&#x3D;’cuda:0’, dtype&#x3D;torch.float16)</p><p>我推测这三个float数值分别代表了这三个文本与一张图片的匹配程度，而最后的probs &#x3D; logits_per_image.softmax(dim&#x3D;-1).cpu().numpy()</p><p>也只是使用 softmax层进行一些权重、对数等变换处理下变成更规范的格式<br>再使用仅仅第一个语句与该图片匹配，tensor中数值仍为25.5625<br>所以验证猜想成立在经过model（image，text）时就已经确定图文匹配度的具体相关值。</p><p><img src="https://img-blog.csdnimg.cn/c1f219cf7820431ea4d5de02e9f6ebb0.png" alt="##"></p><p>将获得图文匹配度封装成函数，并返回匹配度的数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">str1,sent</span>):</span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    model, preprocess = clip.load(<span class="string">&quot;ViT-B/32&quot;</span>, device=device)</span><br><span class="line">    image = preprocess(Image.<span class="built_in">open</span>(str1)).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">    text = clip.tokenize([sent]).to(device)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        image_features = model.encode_image(image)</span><br><span class="line">        text_features = model.encode_text(text)</span><br><span class="line">        logits_per_image, logits_per_text = model(image, text)</span><br><span class="line">        similarity = <span class="built_in">str</span>(logits_per_image)[<span class="number">9</span>:<span class="number">13</span>]</span><br><span class="line">        res = <span class="built_in">int</span>(similarity)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>利用for循环，使用字典构建键值对存放多张图片的绝对路径和图文匹配度，并进行图文匹配度排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;...............................................&#x27;</span></span><br><span class="line">sent = <span class="built_in">input</span>(<span class="string">&quot;请输入图片关键词：&quot;</span>)</span><br><span class="line">   getPic(sent)</span><br><span class="line">   <span class="comment">#获取图片</span></span><br><span class="line">   path0 =<span class="string">&#x27;C:\\Users\\DELL\\Desktop\\CLIP-main\\&#x27;</span>+ sent</span><br><span class="line">   similar_key = []</span><br><span class="line">   similar_value = []</span><br><span class="line">   <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path0):</span><br><span class="line">       <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;jpg&#x27;</span>) <span class="keyword">or</span> filename.endswith(<span class="string">&#x27;png&#x27;</span>):</span><br><span class="line">           <span class="comment">#存储图片的文件夹绝对路径</span></span><br><span class="line">           str1 = path0 +<span class="string">&#x27;\\&#x27;</span>+filename</span><br><span class="line">           similar_key.append(str1)</span><br><span class="line">           sim = <span class="keyword">match</span>(str1,sent)</span><br><span class="line">           <span class="comment">#将得到的多张图片匹配你输入的图片关键词</span></span><br><span class="line">           similar_value.append(sim)</span><br><span class="line">   <span class="comment"># 存放图片绝对路径和图文相似度的字典</span></span><br><span class="line">   similar_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(similar_key, similar_value))</span><br><span class="line">   <span class="built_in">print</span>(similar_dict)</span><br><span class="line">   similar_value.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">   <span class="built_in">print</span>(similar_value)</span><br><span class="line">   result = <span class="string">&#x27; &#x27;</span></span><br><span class="line">   <span class="comment"># 找到图文相似度最高的那个图片的绝对路径</span></span><br><span class="line">   <span class="keyword">for</span> key, value <span class="keyword">in</span> similar_dict.items():</span><br><span class="line">       <span class="keyword">if</span> value == similar_value[<span class="number">0</span>]:</span><br><span class="line">           result = key</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">   img = Image.<span class="built_in">open</span>(result)</span><br><span class="line">   img.show()</span><br></pre></td></tr></table></figure><p>执行完程序显示出最匹配你需求的那张图片。</p><p>还可以用pyqt做一个界面，这样更好用，我打包了一下软件代码。</p><p><a href="https://download.csdn.net/download/Constantiny/86511028?spm=1001.2014.3001.5503 "> 代码下载 </a></p><p>前置的爬虫抓取图片并存储路径的步骤不做介绍。</p><p><img src="https://img-blog.csdnimg.cn/f39ff56c396c4fd6bcf90e81b523c289.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/936149af80e34dcf86911f08a316be18.png" alt="在这里插入图片描述"></p><p>作者也是小白，如果你感觉读后有收获，可以点击下方打赏请作者喝杯咖啡。</p>]]></content>
      
      
      <categories>
          
          <category> 多模态项目 </category>
          
          <category> 以文搜图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
            <tag> CLIP </tag>
            
            <tag> Python </tag>
            
            <tag> Pyqt5 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
