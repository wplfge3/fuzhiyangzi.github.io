<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于CLIP（对比图文预训练方法）实现以文本精准搜图</title>
      <link href="/2022/12/30/txt2img/"/>
      <url>/2022/12/30/txt2img/</url>
      
        <content type="html"><![CDATA[<h2 id="基于CLIP（对比图文预训练方法）实现以文本精准搜图"><a href="#基于CLIP（对比图文预训练方法）实现以文本精准搜图" class="headerlink" title="基于CLIP（对比图文预训练方法）实现以文本精准搜图"></a>基于CLIP（对比图文预训练方法）实现以文本精准搜图</h2><p>在使用<a href="https://so.csdn.net/so/search?q=CLIP&spm=1001.2101.3001.7020">CLIP</a>做图文匹配时，发现只能用多个文本语句和一张图片匹配，而我想实现多个图片与文本进行匹配。</p><p><img src="https://img-blog.csdnimg.cn/f3e1f911b5e144aab584832e735d6b06.png" alt="CLIP"></p><p>然后我打个断点  用DEBUG看了下具体的模型运行过程</p><p>在经过预处理和模型后 logits_per_image以及logits_per_text的</p><p>tensor([[25.5625, 20.0938, 19.7500]], device&#x3D;’cuda:0’, dtype&#x3D;torch.float16)</p><p>我推测这三个float数值分别代表了这三个文本与一张图片的匹配程度，而最后的probs &#x3D; logits_per_image.softmax(dim&#x3D;-1).cpu().numpy()</p><p>也只是使用 softmax层进行一些权重、对数等变换处理下变成更规范的格式<br>再使用仅仅第一个语句与该图片匹配，tensor中数值仍为25.5625<br>所以验证猜想成立在经过model（image，text）时就已经确定图文匹配度的具体相关值。</p><p><img src="https://img-blog.csdnimg.cn/c1f219cf7820431ea4d5de02e9f6ebb0.png" alt="##"></p><p>将获得图文匹配度封装成函数，并返回匹配度的数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match</span>(<span class="params">str1,sent</span>):</span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    model, preprocess = clip.load(<span class="string">&quot;ViT-B/32&quot;</span>, device=device)</span><br><span class="line">    image = preprocess(Image.<span class="built_in">open</span>(str1)).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line">    text = clip.tokenize([sent]).to(device)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        image_features = model.encode_image(image)</span><br><span class="line">        text_features = model.encode_text(text)</span><br><span class="line">        logits_per_image, logits_per_text = model(image, text)</span><br><span class="line">        similarity = <span class="built_in">str</span>(logits_per_image)[<span class="number">9</span>:<span class="number">13</span>]</span><br><span class="line">        res = <span class="built_in">int</span>(similarity)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>利用for循环，使用字典构建键值对存放多张图片的绝对路径和图文匹配度，并进行图文匹配度排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;...............................................&#x27;</span></span><br><span class="line">sent = <span class="built_in">input</span>(<span class="string">&quot;请输入图片关键词：&quot;</span>)</span><br><span class="line">   getPic(sent)</span><br><span class="line">   <span class="comment">#获取图片</span></span><br><span class="line">   path0 =<span class="string">&#x27;C:\\Users\\DELL\\Desktop\\CLIP-main\\&#x27;</span>+ sent</span><br><span class="line">   similar_key = []</span><br><span class="line">   similar_value = []</span><br><span class="line">   <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path0):</span><br><span class="line">       <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;jpg&#x27;</span>) <span class="keyword">or</span> filename.endswith(<span class="string">&#x27;png&#x27;</span>):</span><br><span class="line">           <span class="comment">#存储图片的文件夹绝对路径</span></span><br><span class="line">           str1 = path0 +<span class="string">&#x27;\\&#x27;</span>+filename</span><br><span class="line">           similar_key.append(str1)</span><br><span class="line">           sim = <span class="keyword">match</span>(str1,sent)</span><br><span class="line">           <span class="comment">#将得到的多张图片匹配你输入的图片关键词</span></span><br><span class="line">           similar_value.append(sim)</span><br><span class="line">   <span class="comment"># 存放图片绝对路径和图文相似度的字典</span></span><br><span class="line">   similar_dict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(similar_key, similar_value))</span><br><span class="line">   <span class="built_in">print</span>(similar_dict)</span><br><span class="line">   similar_value.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">   <span class="built_in">print</span>(similar_value)</span><br><span class="line">   result = <span class="string">&#x27; &#x27;</span></span><br><span class="line">   <span class="comment"># 找到图文相似度最高的那个图片的绝对路径</span></span><br><span class="line">   <span class="keyword">for</span> key, value <span class="keyword">in</span> similar_dict.items():</span><br><span class="line">       <span class="keyword">if</span> value == similar_value[<span class="number">0</span>]:</span><br><span class="line">           result = key</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">   img = Image.<span class="built_in">open</span>(result)</span><br><span class="line">   img.show()</span><br></pre></td></tr></table></figure><p>执行完程序显示出最匹配你需求的那张图片。</p><p>还可以用pyqt做一个界面，这样更好用，我打包了一下软件代码。</p><p><a href="https://download.csdn.net/download/Constantiny/86511028?spm=1001.2014.3001.5503 "> 代码下载 </a></p><p>前置的爬虫抓取图片并存储路径的步骤不做介绍。</p><p><img src="https://img-blog.csdnimg.cn/f39ff56c396c4fd6bcf90e81b523c289.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/936149af80e34dcf86911f08a316be18.png" alt="在这里插入图片描述"></p><p>作者也是小白，如果你感觉读后有收获，可以请作者喝杯咖啡。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Yulia playing the piano</title>
      <link href="/2022/12/25/my-first-blog/"/>
      <url>/2022/12/25/my-first-blog/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p><a href="https://imgse.com/i/pS9pJQf"><img src="https://s1.ax1x.com/2022/12/30/pS9pJQf.jpg" alt="pS9pJQf.jpg"></a></p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p><a href="https://imgse.com/i/pS9pBYn"><img src="https://s1.ax1x.com/2022/12/30/pS9pBYn.jpg" alt="pS9pBYn.jpg"></a></p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p><a href="https://imgse.com/i/pS9psS0"><img src="https://s1.ax1x.com/2022/12/30/pS9psS0.jpg" alt="pS9psS0.jpg"></a></p><hr>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
